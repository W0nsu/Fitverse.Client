@using Fitverse.Client.Models
@inject HttpClient Http

<section class="flex flex-col" style="width: 70vw;">
    <div class="flex flex-row justify-start h-40 my-8 pl-10">
        <div class="w-1/4 ml-8">
            <img src="icon/Icon%20metro-calendar.svg" alt="..." class="shadow h-full align-middle border-none m-0"/>
        </div>
        <div class="flex flex-col text-lg w-1/2 pr-10">
            <div class="flex flex-row font-bold text-xl mt-4 ml-8">
                @CalendarClass.ClassName
            </div>
            <div class="flex flex-row w-1/2">
                <div class="font-bold text-fitverseDarkPurple h-4 mx-3">DATE</div>
                <div>@CalendarClass.Date.ToString("dd/MM/yyyy")</div>
            </div>
            <div class="flex flex-row w-1/2">
                <div class="font-bold text-fitverseLightPurple h-4 mx-3">TIME</div>
                <div>@CalendarClass.StartingTime.ToString("HH:mm") - @CalendarClass.EndingTime.ToString("HH:mm")</div>
            </div>
            <div class="flex flex-row w-1/2">
                <div class="font-bold text-fitversePaleBlue h-4 mx-3">LIMIT</div>
                @if (Participants == CalendarClass.Limit)
                {
                    <div class="text-red-500">@Participants / @CalendarClass.Limit</div>
                }
                else
                {
                    <div>@Participants / @CalendarClass.Limit</div>
                }
            </div>
        </div>
    </div>

    <div class="flex flex-col">
        <div class="flex flex-row justify-between w-full h-14 bg-fitversePaleBlue bg-opacity-20">
            <div class="mx-16 my-auto font-bold">
                Participants
            </div>
            @if (Participants == CalendarClass.Limit)
            {
                <div class="flex flex-col justify-center bg-fitverseMidGray mx-16 my-auto h-1/2 w-40 shadow text-white text-center px-2">
                    SIGN UP
                </div>
            }
            else
            {
                <div class="flex flex-col justify-center bg-fitverseMint mx-16 my-auto h-1/2 w-40 shadow text-white text-center px-2 cursor-pointer" @onclick="ShowMembersListModal">
                    SIGN UP
                </div>
            }

        </div>
        <div class="mb-8">
            @if (_isCalendarServiceAvailable)
            {
                @for (var i = 0; i < _reservationsList.Count; i++)
                {
                    var reservation = _reservationsList[i];
                    if (i % 2 == 0)
                    {
                        <div class="flex flex-row justify-between w-full h-14">
                            <div class="flex flex-row justify-around w-1/3 ml-16">
                                <div class="w-1/3 text-left my-auto font-bold">@_reservationsList[i].Member.SurName</div>
                                <div class="w-1/3 text-left my-auto">@_reservationsList[i].Member.Name</div>
                            </div>
                            <div class="flex flex-col justify-center bg-fitverseLightPurple mx-16 my-auto h-1/2 w-40 shadow text-white text-center px-2 cursor-pointer" @onclick="() => SignOutOfClassesAsync(reservation)">
                                SIGN OUT
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="flex flex-row justify-between w-full h-14 bg-fitverseMidGray">
                            <div class="flex flex-row justify-around w-1/3 ml-16">
                                <div class="w-1/3 text-left my-auto font-bold">@_reservationsList[i].Member.SurName</div>
                                <div class="w-1/3 text-left my-auto">@_reservationsList[i].Member.Name</div>
                            </div>
                            <div class="flex flex-col justify-center bg-fitverseLightPurple mx-16 my-auto h-1/2 w-40 shadow text-white text-center px-2 cursor-pointer" @onclick="() => SignOutOfClassesAsync(reservation)">
                                SIGN OUT
                            </div>
                        </div>
                    }
                }
            }
            else
            {
                <div class="mx-auto mt-8 italic text-fitverseMidGray">Reservations temporarily unavalible. Try again later.</div>
            }
        </div>
    </div>

</section>

<style>
    .blazored-modal{
        padding: 0!important;
        border: 0!important;
    }
    
    .blazored-modal-header{
        display: none!important;
    }
</style>

@code {

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [Parameter]
    public CalendarClass CalendarClass { get; set; }

    private bool _isCalendarServiceAvailable = true;
    private List<ReservationGetter> _reservationsList = new();
    private int Participants => _reservationsList.Count;

    protected override async Task OnInitializedAsync()
    {
        _reservationsList = await GetReservationsByClassIdAsync(CalendarClass);
    }

    private async Task<List<ReservationGetter>> GetReservationsByClassIdAsync(CalendarClass calendarClass)
    {
        try
        {
            var result = await Http.GetAsync($"api/cs/classes/{calendarClass.ClassId}/reservation");
            result.EnsureSuccessStatusCode();

            var reservations = await result.Content.ReadFromJsonAsync<List<ReservationGetter>>();

            return reservations;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _isCalendarServiceAvailable = false;
            return new List<ReservationGetter>();
        }
    }

    private async Task SignOutOfClassesAsync(ReservationGetter reservationGetter)
    {
        var options = new ModalOptions
        {
            Animation = ModalAnimation.FadeInOut(.3),
            HideCloseButton = true
        };

        var parameters = new ModalParameters();
        parameters.Add("ConfirmationMessage", $"Are you sure you want to sign out member '{reservationGetter.Member.SurName} {reservationGetter.Member.Name}' from class '{CalendarClass.ClassName}'?");

        var deleteMemberModal = Modal.Show<Confirmation>(null, parameters, options);
        var result = await deleteMemberModal.Result;

        if (!result.Cancelled)
        {
            await Http.DeleteAsync($"api/cs/classes/reservation/{reservationGetter.ReservationId}");
            _reservationsList = await GetReservationsByClassIdAsync(CalendarClass);
        }
        StateHasChanged();
    }

    private async Task ShowMembersListModal()
    {
        var options = new ModalOptions
        {
            Animation = ModalAnimation.FadeInOut(.3),
            ContentScrollable = true,
            HideCloseButton = true
        };

        var parameters = new ModalParameters();
        parameters.Add("CalendarClass", CalendarClass);
        parameters.Add("ReservationsList", _reservationsList);

        var membersListModal = Modal.Show<MembersList>(null, parameters, options);
        _ = await membersListModal.Result;
        _reservationsList = await GetReservationsByClassIdAsync(CalendarClass);
        StateHasChanged();
    }

}