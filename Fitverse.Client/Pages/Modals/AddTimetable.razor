@using Fitverse.Client.Models
@using Fitverse.Shared.Helpers
@inject HttpClient Http
@inject IJSRuntime JsRuntime;

<div class="flex flex-row justify-center" style="width: 70vw;">
    <EditForm Model="@timetable" OnValidSubmit="@AddAsync" class="flex flex-col justify-center items-center w-1/2 mx-auto my-16">
        <FluentValidationValidator/>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Class type</label>
            <select class="h-10" @bind="timetable.ClassTypeId">
                <option value="-1"> ----- </option>
                @if (_classTypesList is not null)
                {
                    @foreach (var classType in _classTypesList)
                    {
                        <option value="@classType.ClassTypeId">@classType.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="() => timetable.ClassTypeId"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Starting date</label>
            <input type="date" class="bg-fitverseLightPurple bg-opacity-20 h-8 border border-black" @bind="timetable.StartingDate"/>
            <ValidationMessage For="() => timetable.StartingDate"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Ending date</label>
            <input type="date" class="bg-fitversePaleBlue bg-opacity-20 h-8 border border-black" @bind="timetable.EndingDate"/>
            <ValidationMessage For="() => timetable.EndingDate"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Class starting time</label>
            <input type="time" class="bg-fitverseCyan bg-opacity-20 h-8 border border-black" @bind="timetable.ClassesStartingTime"/>
            <ValidationMessage For="() => timetable.ClassesStartingTime"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Period type</label>
            <select class="h-10" @bind="timetablePeriodTypeString">
                @foreach (var value in Enum.GetNames(typeof(PeriodType)))
                    {
                        <option value="@value">@value</option>
                    }
            </select>
            <ValidationMessage For="() => timetable.PeriodType"></ValidationMessage>
        </div>
        <div class="flex flex-col justify-center w-1/3 bg-fitverseMint shadow-md text-white text-center px-2 cursor-pointer">
            <button id="SubmitButton" class="m-1" type="submit">ADD TIMETABLE</button>
        </div>
    </EditForm>
</div>

<style>
    .blazored-modal{
        padding: 0!important;
        border: 0!important;
    }
    
    .blazored-modal-header{
        display: none!important;
    }
</style>

@code {
    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    private Timetable timetable = new(){StartingDate = DateTime.Today.AddDays(1), EndingDate = DateTime.Today.AddDays(2), ClassesStartingTime = DateTime.Now, PeriodType = 0};
    private List<ClassType> _classTypesList = new();

    private string timetablePeriodTypeString = "-1";

    protected override async Task OnInitializedAsync()
    {
        _classTypesList = await GetAllClassTypesAsync();
    }

    private async Task<List<ClassType>> GetAllClassTypesAsync()
    {
        return await Http.GetFromJsonAsync<List<ClassType>>($"api/cs/calendar/settings");
    }

    private async Task AddAsync()
    {
        await JsRuntime.InvokeVoidAsync("SubmitButtonDisable");
        timetable.PeriodType = (int)Enum.Parse(typeof(PeriodType), timetablePeriodTypeString);
        _ = await Http.PostAsJsonAsync("api/cs/timetable", timetable);

        await ModalInstance.CloseAsync();
    }
}