@using Fitverse.Client.Helpers
@using Fitverse.Client.Models
@using Microsoft.AspNetCore.JsonPatch
@using Newtonsoft.Json
@using System.Text
@using System.Threading
@inject HttpClient Http

<div class="flex flex-row justify-center" style="width: 70vw;">
    <EditForm Model="@MemberDetails" OnValidSubmit="@EditAsync" class="flex flex-col justify-center items-center w-1/2 mx-auto my-16">
        <FluentValidationValidator/>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Name</label>
            <input class="bg-fitverseDarkPurple bg-opacity-20 h-8 border border-black" @bind="MemberDetails.Name"/>
            <ValidationMessage For="() => MemberDetails.Name"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Surname</label>
            <input class="bg-fitverseLightPurple bg-opacity-20 h-8 border border-black" @bind="MemberDetails.SurName"/>
            <ValidationMessage For="() => MemberDetails.SurName"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Email</label>
            <input class="bg-fitversePaleBlue bg-opacity-20 h-8 border border-black" @bind="MemberDetails.Email"/>
            <ValidationMessage For="() => MemberDetails.Email"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Phone number</label>
            <input class="bg-fitverseCyan bg-opacity-20 h-8 border border-black" @bind="MemberDetails.PhoneNumber"/>
            <ValidationMessage For="() => MemberDetails.PhoneNumber"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-10 w-full">
            <label class="text-center">PESEL</label>
            <input class="bg-fitversePaleBlue bg-opacity-20 h-8 w-full border border-black" @bind="MemberDetails.Pesel"/>
            <ValidationMessage For="() => MemberDetails.Pesel"></ValidationMessage>
        </div>
        <div class="flex flex-col justify-center w-1/3 bg-fitverseMint shadow-md text-white text-center px-2 cursor-pointer">
            <button class="m-1" type="submit">SAVE CHANGES</button>
        </div>
    </EditForm>
</div>

<style>
    .blazored-modal{
        padding: 0!important;
        border: 0!important;
    }
    
    .blazored-modal-header{
        display: none!important;
    }
</style>

@code {
    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public Member MemberDetails { get; set; }

    private Member oldMember { get; set; }
    
    protected override void OnInitialized()
    {
        oldMember = new Member()
        {
            Name = MemberDetails.Name,
            SurName = MemberDetails.SurName,
            Email = MemberDetails.Email,
            PhoneNumber = MemberDetails.PhoneNumber,
            Pesel = MemberDetails.Pesel
        };
    }
    
    private async Task EditAsync()
    {
        var source = new CancellationTokenSource();
        var patchMember = new JsonPatchDocument<Member>();

        if (oldMember != MemberDetails)
        {
            foreach (var property in MemberDetails.GetType().GetProperties())
            {
                switch (property.Name.ToLower())
                {
                    case "name":
                        if (MemberDetails.Name != oldMember.Name)
                            patchMember.Replace(x => x.Name, MemberDetails.Name);
                        break;
                    case "surname":
                        if (MemberDetails.SurName != oldMember.SurName)
                            patchMember.Replace(x => x.SurName, MemberDetails.SurName);
                        break;
                    case "email":
                        if (MemberDetails.Email != oldMember.Email)
                            patchMember.Replace(x => x.Email, MemberDetails.Email);
                        break;
                    case "phonenumber":
                        if (MemberDetails.PhoneNumber != oldMember.PhoneNumber)
                            patchMember.Replace(x => x.PhoneNumber, MemberDetails.PhoneNumber);
                        break;
                    case "pesel":
                        if (MemberDetails.Pesel != oldMember.Pesel)
                            patchMember.Replace(x => x.Pesel, MemberDetails.Pesel);
                        break;
                }
            }
        
            var serializedMember = JsonConvert.SerializeObject(patchMember);
            var requestContent = new StringContent(serializedMember, Encoding.UTF8, "application/json-patch+json");
            _ = await Http.PatchAsync($"api/ms/members/{MemberDetails.MemberId}", requestContent);
        }

        await ModalInstance.CloseAsync();
    }
}