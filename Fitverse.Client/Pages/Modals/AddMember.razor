@using Fitverse.Client.Models
@using System.Threading
@inject HttpClient Http
@inject IJSRuntime JsRuntime;

<div class="flex flex-row justify-center" style="width: 70vw;">
    <EditForm Model="@member" OnValidSubmit="@AddAsync" class="flex flex-col justify-center items-center w-1/2 mx-auto my-16">
        <FluentValidationValidator/>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Name</label>
            <input class="bg-fitverseDarkPurple bg-opacity-20 h-8 border border-black" @bind="member.Name"/>
            <ValidationMessage For="() => member.Name"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Surname</label>
            <input class="bg-fitverseLightPurple bg-opacity-20 h-8 border border-black" @bind="member.SurName"/>
            <ValidationMessage For="() => member.SurName"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Email</label>
            <input class="bg-fitversePaleBlue bg-opacity-20 h-8 border border-black" @bind="member.Email"/>
            <ValidationMessage For="() => member.Email"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-8 w-full">
            <label class="text-center">Phone number</label>
            <input class="bg-fitverseCyan bg-opacity-20 h-8 border border-black" @bind="member.PhoneNumber"/>
            <ValidationMessage For="() => member.PhoneNumber"></ValidationMessage>
        </div>
        <div class="flex flex-col mb-10 w-full">
            <label class="text-center">PESEL</label>
            <input class="bg-fitversePaleBlue bg-opacity-20 h-8 w-full border border-black" @bind="member.Pesel"/>
            <ValidationMessage For="() => member.Pesel"></ValidationMessage>
        </div>
        <div class="flex flex-col justify-center w-1/3 bg-fitverseMint shadow-md text-white text-center px-2 cursor-pointer">
            <button id="SubmitButton" class="m-1" type="submit">ADD MEMBER</button>
        </div>
    </EditForm>
</div>

<style>
    .blazored-modal{
        padding: 0!important;
        border: 0!important;
    }
    
    .blazored-modal-header{
        display: none!important;
    }
</style>
@code {

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    private Member member = new();

    private async Task AddAsync()
    {
        await JsRuntime.InvokeVoidAsync("SubmitButtonDisable");
        _ = await Http.PostAsJsonAsync("api/ms/members", member);

        await ModalInstance.CloseAsync();
    }
}